diff --git a/.vscode/tasks.json b/.vscode/tasks.json
new file mode 100644
index 0000000..0bb8a85
--- /dev/null
+++ b/.vscode/tasks.json
@@ -0,0 +1,28 @@
+{
+    "tasks": [
+        {
+            "type": "cppbuild",
+            "label": "C/C++: gcc-9 build active file",
+            "command": "/usr/bin/gcc-9",
+            "args": [
+                "-fdiagnostics-color=always",
+                "-g",
+                "${file}",
+                "-o",
+                "${fileDirname}/${fileBasenameNoExtension}"
+            ],
+            "options": {
+                "cwd": "${fileDirname}"
+            },
+            "problemMatcher": [
+                "$gcc"
+            ],
+            "group": {
+                "kind": "build",
+                "isDefault": true
+            },
+            "detail": "Task generated by Debugger."
+        }
+    ],
+    "version": "2.0.0"
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..7ec23a2 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o \
+  $K/rand.o \
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -132,6 +133,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testticket\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +156,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..7e751d0 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,9 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             settickets(int); // offline 3
+int             getpinfo(uint64); // offline 3
+int             getCurrentActiveTickets(void); // offline 3
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -187,3 +190,6 @@ void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
+// rand.c
+long genrand(int); // offline 3
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..3d77f1c 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -114,6 +115,9 @@ allocproc(void)
   for(p = proc; p < &proc[NPROC]; p++) {
     acquire(&p->lock);
     if(p->state == UNUSED) {
+      p->tickets_original = 1;
+      p->tickets_current = 1;
+      p->time_slices = 0;
       goto found;
     } else {
       release(&p->lock);
@@ -318,10 +322,19 @@ fork(void)
   np->parent = p;
   release(&wait_lock);
 
+  int tickets_original = 0;
+  acquire(&p->lock);
+  tickets_original = p->tickets_original;
+  release(&p->lock);
+
   acquire(&np->lock);
+  np->tickets_original = tickets_original; // setting tickets for baccha kaccha
+  np->tickets_current = tickets_original;
+  np->time_slices = 0;
   np->state = RUNNABLE;
   release(&np->lock);
-
+ // np->tickets_original = p->tickets_original; // setting tickets for baccha kaccha
+ // np->tickets_current = np->tickets_original;
   return pid;
 }
 
@@ -447,24 +460,47 @@ scheduler(void)
   struct proc *p;
   struct cpu *c = mycpu();
   
+  
   c->proc = 0;
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
-
+    int activeTickets = getCurrentActiveTickets();
+    if( activeTickets == 0 ){
+      for(p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+
+      // if(p->state == RUNNABLE) {
+          p->tickets_current = p->tickets_original;
+      // }
+        release(&p->lock);
+      }
+      continue;
+    }
+    int random = genrand(activeTickets)+1;
+    int cumsum = 0;
+    int taken = 0;
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
+
       if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+        cumsum+=p->tickets_current;
+        if( cumsum >= random && p->tickets_current != 0 && taken == 0 ){
+          taken = 1;
+          p->tickets_current-=1;
+          p->time_slices+=1;
+          p->state = RUNNING;
+          c->proc = p;
+          swtch(&c->context, &p->context);
+           // Switch to chosen process.  It is the process's job
+          // to release its lock and then reacquire it
+          // before jumping back to us.
+        
+
+          // Process is done running for now.
+          // It should have changed its p->state before coming back.
+          c->proc = 0;
+        }
       }
       release(&p->lock);
     }
@@ -681,3 +717,61 @@ procdump(void)
     printf("\n");
   }
 }
+
+// problem 
+int settickets(int ticketNumber){
+
+  struct proc *mp = myproc();
+  acquire(&mp->lock);
+  mp->tickets_original = ticketNumber;
+  mp->tickets_current = ticketNumber;
+  mp->time_slices = 0;
+  release(&mp->lock);
+  //struct proc *p;
+  // for(p = proc; p < &proc[NPROC]; p++){
+  //   acquire(&p->lock);
+  //   if( p->pid == mp->pid ){
+  //     p->tickets_original = ticketNumber;
+  //   }
+  //   release(&p->lock);
+  // }
+  return 0;
+}
+
+int getpinfo(uint64 addr){
+
+  struct proc *mp = myproc();
+  struct proc *p;
+  struct pstat pst;
+  int i=0;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    pst.pid[i] = p->pid;
+    pst.inuse[i] = p->state != UNUSED;
+    pst.tickets_original[i] = p->tickets_original;
+    pst.tickets_current[i] = p->tickets_current;
+    pst.time_slices[i] = p->time_slices;
+    release(&p->lock);
+    i++;
+  }
+  if(copyout(mp->pagetable, addr, (char *)&pst, sizeof(pst)) < 0)
+    return -1;
+  return 0;
+}
+
+int getCurrentActiveTickets(){
+
+  //struct proc *mp = myproc();
+  struct proc *p;
+ 
+ 
+  int tickets = 0;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if( p->state == RUNNABLE ) 
+      tickets+=p->tickets_current;
+    release(&p->lock);
+   
+  }
+  return tickets;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..74f58e9 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int tickets_original; // offline 3
+  int tickets_current; // offline 3
+  int time_slices;      // offline 3
+
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..65f6c74
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,21 @@
+#ifndef _PSTAT_H_
+
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+
+    int pid[NPROC]; // the process ID of each process
+
+    int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+
+    int tickets_original[NPROC]; // the number of tickets each process originally had
+
+    int tickets_current[NPROC]; // the number of tickets each process currently has
+
+    int time_slices[NPROC]; // the number of time slices each process has been scheduled
+
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/rand.c b/kernel/rand.c
new file mode 100644
index 0000000..23df286
--- /dev/null
+++ b/kernel/rand.c
@@ -0,0 +1,129 @@
+/* A C-program for MT19937: Real number version  (1998/4/6)    */
+/*   genrand() generates one pseudorandom real number (double) */
+/* which is uniformly distributed on [0,1]-interval, for each  */
+/* call. sgenrand(seed) set initial values to the working area */
+/* of 624 words. Before genrand(), sgenrand(seed) must be      */
+/* called once. (seed is any 32-bit integer except for 0).     */
+/* Integer generator is obtained by modifying two lines.       */
+/*   Coded by Takuji Nishimura, considering the suggestions by */
+/* Topher Cooper and Marc Rieffel in July-Aug. 1997.           */
+
+/* This library is free software; you can redistribute it and/or   */
+/* modify it under the terms of the GNU Library General Public     */
+/* License as published by the Free Software Foundation; either    */
+/* version 2 of the License, or (at your option) any later         */
+/* version.                                                        */
+/* This library is distributed in the hope that it will be useful, */
+/* but WITHOUT ANY WARRANTY; without even the implied warranty of  */
+/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.            */
+/* See the GNU Library General Public License for more details.    */
+/* You should have received a copy of the GNU Library General      */
+/* Public License along with this library; if not, write to the    */
+/* Free Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA   */ 
+/* 02111-1307  USA                                                 */
+
+/* Copyright (C) 1997 Makoto Matsumoto and Takuji Nishimura.       */
+/* When you use this, send an email to: matumoto@math.keio.ac.jp   */
+/* with an appropriate reference to your work.                     */
+
+/* REFERENCE                                                       */
+/* M. Matsumoto and T. Nishimura,                                  */
+/* "Mersenne Twister: A 623-Dimensionally Equidistributed Uniform  */
+/* Pseudo-Random Number Generator",                                */
+/* ACM Transactions on Modeling and Computer Simulation,           */
+/* Vol. 8, No. 1, January 1998, pp 3--30.                          */
+
+// #include<stdio.h>
+
+/* Period parameters */  
+#define N 624
+#define M 397
+#define MATRIX_A 0x9908b0df   /* constant vector a */
+#define UPPER_MASK 0x80000000 /* most significant w-r bits */
+#define LOWER_MASK 0x7fffffff /* least significant r bits */
+
+/* Tempering parameters */   
+#define TEMPERING_MASK_B 0x9d2c5680
+#define TEMPERING_MASK_C 0xefc60000
+#define TEMPERING_SHIFT_U(y)  (y >> 11)
+#define TEMPERING_SHIFT_S(y)  (y << 7)
+#define TEMPERING_SHIFT_T(y)  (y << 15)
+#define TEMPERING_SHIFT_L(y)  (y >> 18)
+#define RAND_MAX 0x7fffffff
+static unsigned long mt[N]; /* the array for the state vector  */
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+static int set = 0;
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(seed)
+    unsigned long seed;	
+{
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    for (mti=1; mti<N; mti++)
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+}
+
+long  /* for integer generation */
+genrand(int upper)
+{
+    if( set == 0 ){
+        sgenrand(4357);
+        set = 1;
+    }
+    
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+        int kk;
+
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+            sgenrand(4357); /* a default initial seed is used   */
+
+        for (kk=0;kk<N-M;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        for (;kk<N-1;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+    y ^= TEMPERING_SHIFT_U(y);
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    y ^= TEMPERING_SHIFT_L(y);
+   // int mx = 1000;
+   // double val1 = ( (double)y * 2.3283064370807974e-10 );
+   // int val2 = val1*mx;
+   // return val2;
+    //return ( (double)y * 2.3283064370807974e-10 ); /* reals */
+    y = y & RAND_MAX;
+    y = y % upper;
+     return y;  /* for integer generation */
+}
+
+/* this main() outputs first 1000 generated numbers  */
+//
+// main()
+// { 
+//     int j;
+
+//     sgenrand(4357); /* any nonzero integer can be used as a seed */
+//     for (j=0; j<1000; j++) {
+//         printf("%10.8f ", genrand());
+//         if (j%8==7) printf("\n");
+//     }
+//     printf("\n");
+// }
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..db62bcc 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void); // offline 3:: adding prototype of sys_call: sys_settickets
+extern uint64 sys_getpinfo(void); // offline 3:: adding prototype of sys_call: sys_getpinfo
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets]   sys_settickets, // offline 3:: adding mapping to function sys_sysinfo
+[SYS_getpinfo]   sys_getpinfo, // offline 3:: adding mapping to function sys_sysinfo
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..751774e 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets  22 //offline 3
+#define SYS_getpinfo  23 //offline 3
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..69db59f 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,7 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
-
+#include "pstat.h"
 uint64
 sys_exit(void)
 {
@@ -89,3 +89,35 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+// offline 3
+// sets the ticket count
+uint64
+sys_settickets(void)
+{
+  int ticketCount;
+  argint(0,&ticketCount);
+  if( ticketCount < 0)
+    return -1;
+  else if( ticketCount == 0 ){
+    return settickets(1);
+  }else{
+    return settickets(ticketCount);
+  }
+
+  return 0;
+}
+
+// offline 3
+// sets the ticket count
+uint64
+sys_getpinfo(void)
+{
+  uint64 addr;
+  argaddr(0, &addr);
+  if( addr < 0 )
+    return -1;
+  return getpinfo(addr); 
+ 
+}
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..470c65a
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,21 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/pstat.h"
+int
+main(int argc,char *argv[]){
+    struct pstat pst;
+    if (getpinfo(&pst) < 0) {
+        fprintf(2, "%s: exec failed\n", argv[0]);
+        exit(1);
+    }
+    printf("PID | In Use | Original Tickets | Current Tickets | Time Slices\n");
+    for(int i=0;i<NPROC;i++){
+        if(  pst.inuse[i] == 0 ) continue;
+        printf("%d\t%d\t%d\t\t%d\t\t%d\n",
+            pst.pid[i],pst.inuse[i],pst.tickets_original[i],
+            pst.tickets_current[i],pst.time_slices[i]);
+        
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/testticket.c b/user/testticket.c
new file mode 100644
index 0000000..6368f02
--- /dev/null
+++ b/user/testticket.c
@@ -0,0 +1,30 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc,char *argv[]){
+
+    
+    if( argc<2 ){
+        fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+        exit(1);
+    }
+    int ticket = atoi(argv[1]);
+    if (settickets(ticket) < 0) {
+        fprintf(2, "%s: exec failed\n", argv[0]);
+        exit(1);
+    }
+    // test tickets
+    // while (1){
+    //     ;
+    // }
+    // exit(0);
+    
+    // test fork
+    if( fork() == 0 ){
+        //fork();
+        while(1);
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..8d771da 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat; //offline 3
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int); // offline 3
+int getpinfo(struct pstat*); //offline 3
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..0f88355 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets"); 
+entry("getpinfo"); 
+
